:root {
    --backgroundColor: white;
    --boardWidth: 74%;
    --playerChoiceLabelSize: 10vh;
    --playerChoiceDisplay: flex;
}
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
}
main {
    height: 100%;
    flex-flow: row nowrap;
    align-items: center;
    background-color: var(--backgroundColor);
}

h1 {
    text-align: center;
}
#gameChoice, .playerChoice, .proficiencyChoice {
    display: flex;
    flex-flow: row nowrap;
    max-width: 100%;
    overflow-x: scroll;
    scrollbar-width: none;
    height: calc(50vh + 3em);
}
.proficiencyChoice {
    display: none;
}
input[type="radio"] {
    display: none;
}
figure {
    display: inline;
    text-align: center;
}
label img {
    max-height: 40vh;
    max-width: 60vw;
    transition: max-height, 1s;
}
input[type="radio"]:checked + label img {
    max-height: 50vh;
    max-width: 75vw;
    transition: max-height, 1s;
}
input[type="submit"] {
    width: 100%;
    height: 20vh;
    font-size: 10vh;
}

.playerProficiency, .boxOnly {
    display: none;
}

#gameBoardContainer, #playerBoardContainer {
    position: relative;
}
#gameBoardContainer {
    aspect-ratio: 1280 / 853;
    height: 100%;
}
#gameBoard {
    height: 100%;
    width: 100%;
}

#locations, #darkArtsEvents {
    height: 18%;
    position: absolute;
    top: 16%;
}
#locations, #villainDraw, #villain1 {
    left: 5%;
}
#locations {
    width: 16.5%;
}
.location, .darkArtsEvent, #darkArtsEventBack, .villain, .event {
    height: 100%;
    border-radius: 10px;
    position: absolute;
    top: 0;
    left: 0;
}

.locationToken {
    position: absolute;
    height: 16%;
}

#darkArtsEvents {
    left: 31%;
    width: 29%;
    z-index: 1;
}
#darkArtsEvents.display {
    display: flex;
    flex-flow: row nowrap;
}
.darkArtsEvent {
    transform: rotateY(180deg) translateX(0);
    opacity: 0;
    transition: transform 1s, opacity 1s;
}
.darkArtsEvent.flipped {
    --translate: 138%;
    opacity: 1;
    transform: rotateY(0) translateX(var(--translate));
    animation: flip 1s;
}
@keyframes flip {
    from {
        opacity: 0;
        transform: rotateY(180deg) translateX(0);
    }
    to {
        opacity: 1;
        transform: rotateY(0) translateX(var(--translate));
    }
}
.darkArtsEvent.display {
    position: static;
    transform: translateX(0);
}
.darkArtsEvent.fadeOut {
    animation: fadeOut 1s;
}
@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

#villainDraw, #encounters, #villainDiscard {
    height: 17%;
    position: absolute;
    top: 39%;
}

#encounters {
    left: 27%;
    width: 12%;
}
.symbol {
    position: absolute;
    top: 62%;
    height: 12%;
}

#villainDiscard {
    left: 46%;
}

.activeVillain {
    height: 17%;
    position: absolute;
    top: 64%;
}
#villain2 {
    left: 25%;
}
#villain3 {
    left: 46%;
}
.villain {
    z-index: 0;
}
.petrifiedToken, .harpToken {
    --height: 80%;
    z-index: 1;
    height: var(--height);
    position: absolute;
    top: calc((100% - var(--height)) / 2);
    transform: translateX(calc(115% - var(--height)));
}

.villainDamage {
    position: absolute;
    top: 82%;
    height: 10%;
    width: 17%;
    display: flex;
    flex-flow: row wrap;
}
#villain1Damage {
    left: 5%;
}
#villain2Damage {
    left: 25%;
}
#villain3Damage {
    left: 46%;
}

.villain.defeating, .locationToken.removing {
    opacity: 0;

    /* https://stackoverflow.com/questions/11679567/using-css-for-a-fade-in-effect-on-page-load */
    -webkit-animation: fadeOut 1s; /* Safari, Chrome and Opera > 12.1 */
       -moz-animation: fadeOut 1s; /* Firefox < 16 */
        -ms-animation: fadeOut 1s; /* Internet Explorer */
         -o-animation: fadeOut 1s; /* Opera < 12.1 */
            animation: fadeOut 1s;
}
@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}
/* Firefox < 16 */
@-moz-keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}
/* Safari, Chrome, and Opera > 12.1 */
@-webkit-keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}
/* Internet Explorer */
@-ms-keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}
/* Opera < 12.1 */
@-o-keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}
.villain.defeated, .locationToken.adding {
    opacity: 1;

    /* https://stackoverflow.com/questions/11679567/using-css-for-a-fade-in-effect-on-page-load */
    -webkit-animation: fadeIn 1s; /* Safari, Chrome and Opera > 12.1 */
       -moz-animation: fadeIn 1s; /* Firefox < 16 */
        -ms-animation: fadeIn 1s; /* Internet Explorer */
         -o-animation: fadeIn 1s; /* Opera < 12.1 */
            animation: fadeIn 1s;
}
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
/* Firefox < 16 */
@-moz-keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
/* Safari, Chrome, and Opera > 12.1 */
@-webkit-keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
/* Internet Explorer */
@-ms-keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
/* Opera < 12.1 */
@-o-keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.shop, #hogwartsCardBack {
    height: 20%;
    position: absolute;
}
#shop1, #shop2 {
    top: 26%;
}
#shop3, #shop4 {
    top: 50%;
}
#shop5, #shop6 {
    top: 74%;
}
#shop1, #shop3, #shop5 {
    left: 68%;
}
#shop2, #shop4, #shop6 {
    left: 84%;
}
.shop img, #hogwartsCardBack img {
    height: 100%;
    width: 100%;
    border-radius: 10px;
}
#hogwartsCardBack {
    top: 4%;
    left: 76%;
}

#playerContainer {
    height: 100%;
    padding-top: 1em;
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    overflow-y: auto;
}
#playerHero, #playerProficiency {
    width: 50%;
}

#horcruxesDestroyed {
    display: flex;
}
#horcruxesDestroyed img {
    width: calc(100% / 6);
}

#playerBoard {
    width: 100%;
}
#healthTracker {
    height: 20%;
    position: absolute;
    top: 12%;
    left: 2%;
    transition: top 1s, left 1s;
}
#attackTokens, #influenceTokens {
    height: 28%;
    width: 46%;
    position: absolute;
    top: 62%;
    display: flex;
    flex-flow: row wrap;
}
#attackTokens {
    left: 3%;
}
#influenceTokens {
    left: 50%;
}
.attackToken, .influenceToken {
    height: 50%;
}

#playerHand {
    width: 100%;
    display: flex;
    flex-flow: row wrap;
}
.card {
    width: 20%;
}

#endTurn {
    margin: 1em;
}

#playerChoiceContainer {
    display: var(--playerChoiceDisplay);
    flex-flow: column nowrap;
    justify-content: center;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 100vw;
    z-index: 2;
}
#playerChoiceLabel {
    background-color: var(--backgroundColor);
    text-align: center;
    width: fit-content;
    margin: 0;
    font-size: var(--playerChoiceLabelSize);
}
#playerChoice {
    flex-grow: 1;
    display: grid;
    background-color: black;
    gap: 10px;
}
.choice {
    background-color: var(--backgroundColor);
    height: 100%;
    width: 100%;
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    align-items: center;
    overflow: auto;
}
.choice img {
    max-height: calc(100vh - var(--playerChoiceLabelSize) - 5rem);
    max-width: 100%;
}
.choiceContainer {
    display: flex;
    align-items: center;
    justify-content: center;
}
#playerChoice.revealBoard, #playerChoiceLabel.revealBoard {
    visibility: hidden;
}
#revealBoard {
    height: fit-content;
    width: fit-content;
}

#disableScreen {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    z-index: 3;
}

.magnifyContainer {
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 100vw;
    z-index: 99;
    display: flex;
    justify-content: center;
    align-items: center;
}
.magnifyContainer img {
    all: unset;
    max-height: 100%;
    max-width: 100%;
}

@keyframes darken {
    0% {
        filter: brightness(1);
    }
    50% {
        filter: brightness(.5);
    }
    100% {
        filter: brightness(1);
    }
}